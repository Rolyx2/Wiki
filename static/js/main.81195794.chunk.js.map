{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Console","prop","console","Object","keys","values","value","a","fetch","data","json","App","useState","nameMassive","setNameMassive","input","setInput","className","onInput","e","target","log","id","onClick","preventDefault","dsp","then","dspMassive","i","length","push","name","link","map","wiki","class","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yOAIMA,G,MAAU,SAAAC,GAAI,aAClB,EAAAC,SAAQC,OAAOC,KAAKH,GAAM,IAA1B,oBAAiCE,OAAOE,OAAOJ,KAC9C,O,4CAGH,WAAoBK,GAApB,eAAAC,EAAA,sEACmBC,MAAM,uDAAwDF,GADjF,cACMG,EADN,gBAEeA,EAAKC,OAFpB,oF,sBAwCeC,MAnCf,WAAgB,IAAD,EACyBC,mBAAS,IADlC,mBACNC,EADM,KACOC,EADP,OAGaF,mBAAS,IAHtB,mBAGNG,EAHM,KAGCC,EAHD,KAoBb,OACE,yBAAKC,UAAU,OACb,2BAAOX,MAAOS,EAAOG,QAAS,SAAAC,GAAC,OAAIH,EAASG,EAAEC,OAAOd,UACrD,kBAAC,EAAD,CAASe,IAAI,UACb,4BAAQC,GAAG,eAAeC,QApBX,SAACJ,GAClBA,EAAEK,iBACFtB,QAAQmB,IAAIN,G,2CACZU,CAAIV,GAAOW,MAAK,SAACjB,GAEb,IADF,IAAIkB,EAAa,GACNC,EAAI,EAAGA,EAAInB,EAAK,GAAGoB,OAAQD,IAClCD,EAAWG,KAAK,CACdC,KAAMtB,EAAK,GAAGmB,GACdI,KAAMvB,EAAK,GAAGmB,KAGtBd,EAAea,QASb,MACA,6BAEId,EAAYoB,KAAI,SAAAC,GAAI,OAAI,uBAAGC,MAAM,OAAOC,KAAMF,EAAKF,MAAOE,EAAKH,YC7BrDM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,a","file":"static/js/main.81195794.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport './App.css';\n\nconst Console = prop => (\n  console[Object.keys(prop)[0]](...Object.values(prop))\n  ,null // âžœ React components must return something \n)\n\nasync function dsp (value) {\n  let data = await fetch(\"https://fast-refuge-95275.herokuapp.com/news?search=\"+ value);\n  return await data.json();\n}\n\nfunction App() {\n  const [nameMassive, setNameMassive] = useState([]);\n  let linkMassive = [];\n  const [input, setInput] = useState('');\n  let handleClick2 = (e) => {\n    e.preventDefault();\n    console.log(input);\n    dsp(input).then((data) => {\n      let dspMassive = [];\n        for (let i = 0; i < data[1].length; i++) {\n          dspMassive.push({\n            name: data[1][i],\n            link: data[3][i]\n          })\n        }\n    setNameMassive(dspMassive);\n    })\n  }\n\n  \n  return (\n    <div className=\"App\">\n      <input value={input} onInput={e => setInput(e.target.value)}/>\n      <Console log='First' />\n      <button id='searchButton' onClick={handleClick2}> F</button>\n      <div>\n        {\n          nameMassive.map(wiki => <a class='linq' href={wiki.link}>{wiki.name}</a>)\n        }\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}